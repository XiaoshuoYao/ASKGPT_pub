{"version":3,"file":"background.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,6BAA6B;AACtE;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW,gBAAgB,WAAW;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,0BAA0B;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;;AAEA;AACA;AACA;AACA,WAAW,OAAO,GAAG,QAAQ;AAC7B,C","sources":["webpack://my-extension/./src/background.js"],"sourcesContent":["'use strict';\n\n// With background scripts you can communicate with popup\n// and contentScript files.\n// For more information on background script,\n// See https://developer.chrome.com/extensions/background_pages\n\nconst defaultCaptionRange = 60\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n\t// Fetch and parse the caption using the provided video ID or other details\n\tif (request.action === \"fetchTranscript\") {\n\t\tconsole.log(request.url)\n\t\t//Get transcript from url\n\t\tfetch(request.url)\n\t\t\t.then(response => response.text())\n\t\t\t.then(data => {\n\t\t\t\tsendResponse(data);\n\t\t\t})\n\t\t\t.catch(error => console.error('Error:', error));\n\t\treturn true;\n\t}\n\t// Make an API call to GPT with the provided caption and question\n\telse if (request.action === \"askGPT\") {\n\t\t\n\n\t\tchrome.storage.local.get(request.vid, function (result) {\n\t\t\tconsole.log(result)\n\t\t\tconst context = getTranscriptSegment(result[request.vid]['transcript'], request.timestamp, 240);\n\t\t\tconsole.log(context)\n\t\t\tsaveMessage(request.vid, 'user', (`[${parseTime(request.timestamp)}]`) + request.question)\n\t\t\taskGpt(request.timestamp, context, request.question).then(res => {\n\t\t\t\tconsole.log(res);\n\t\t\t\tsendResponse(res)\n\t\t\t});\n\t\t\treturn true;\n\t\t});\n\t\treturn true;\n\t}\n});\n\nfunction getTranscriptSegment(transcriptDict, timestamp, range) {\n\tconsole.log(transcriptDict);\n\tlet lowerBound = timestamp - range / 2;\n\tlet upperBound = timestamp + range / 2;\n\tlet segment = \"\";\n\tif (lowerBound < 0) {\n\t\tlowerBound = 0;\n\t}\n\tconsole.log(lowerBound);\n\tfor (const [startTime, entry] of Object.entries(transcriptDict)) {\n\t\tconst start = startTime;\n\t\tconst end = start + parseFloat(entry.duration);\n\t\tconsole.log(start)\n\t\tif (end >= lowerBound || start <= upperBound) {\n\t\t\tsegment += `${startTime}: ` + entry.text + \"\\n\";\n\t\t}\n\t}\n\treturn segment.trim();\n}\n\nchrome.runtime.onMessage.addListener(\n\tfunction (request, sender, sendResponce) {\n\t\tif (request.status === \"Storage Updated\") {\n\t\t\tchrome.storage.local.get('code', function (code) {\n\t\t\t\t// ... with code.code ...\n\t\t\t});\n\n\t\t\tsendResponce({ status: \"Update Recieved\" });\n\t\t\treturn true;\n\t\t}\n\t}\n);\n\nasync function askGpt(timestamp, transcript, question) {\n\tconst model = \"gpt-3.5-turbo-16k\"\n\tconst url = \"https://api.openai.com/v1/chat/completions\"\n\tconst apiKey = 'Bearer [API_KEY]'\n\tconst headers = {\n\t\t\"Content-Type\": \"application/json\",\n\t\t\"Authorization\": apiKey\n\t}\n\tconst rolePrompt = `You are helping people to better comprehend YouTube videos by answering the questions on a video. \n\tThis is a segment of a transcript from the video. Note the number before the : are time stamp of the text. \n\tThe user asked this question at ${timestamp} seconds. \\n\\n ${transcript}`;\n\n\tconst body = JSON.stringify({\n\t\t\"model\": model,\n\t\t\"messages\": [\n\t\t\t{\n\t\t\t\t\"role\": \"system\",\n\t\t\t\t\"content\": rolePrompt\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"role\": \"user\",\n\t\t\t\t\"content\": question\n\t\t\t}]\n\t});\n\n\ttry {\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: headers,\n\t\t\tbody: body\n\t\t});\n\t\tconsole.log(response);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error('Network response was not ok ' + response.statusText);\n\t\t}\n\n\t\tconst data = await response.json();\n\t\tconsole.log(data);\n\t\tconst answer = data.choices[0].message.content.trim();\n\t\tchrome.storage.local.get('currentVideoId', function(result) {\n\t\t\tconsole.log(result);\n\t\t\tconst currentVideoId = result['currentVideoId'];\n\t\t\tsaveMessage(currentVideoId, 'gpt', answer)\n\t\t});\n\t\t\n\t\treturn answer\n\t}\n\tcatch (error) {\n\t\tconsole.error('There has been a problem with your fetch operation:', error);\n\t}\n}\n\nfunction saveMessage(vid, from, text) {\n\n\t// Get the current list of messages from storage\n\tchrome.storage.local.get(vid, (result) => {\n\t\t\n\t\tlet messages = result[vid].messages || [];\n\n\t\t// Add the new message to the messages array\n\t\tmessages.push({ sender: from, text: text });\n\n\t\tresult[vid].messages = messages\n\n\t\tconsole.log(result)\n\n\t\t// Store the updated messages array back to storage\n\t\tchrome.storage.local.set(result, () => {\n\t\t\tconsole.log('Message stored successfully');\n\t\t});\n\t});\n}\n\nfunction parseTime(timestamp){\n\tconst minute = parseInt(timestamp / 60);\n\tconst seconds = parseInt(timestamp % 60);\n\treturn `${minute}:${seconds}`\n}"],"names":[],"sourceRoot":""}