{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNa;;AAEQ;;AAErB;AACA;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE,oBAAoB;AACpB;AACA;AACA,QAAQ;AACR,IAAI;;;AAGJ;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,UAAU;AAC7C;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,eAAe;AACrD,4BAA4B,YAAY,aAAa;AACrD;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,C","sources":["webpack://my-extension/./src/popup.css","webpack://my-extension/webpack/bootstrap","webpack://my-extension/webpack/runtime/make namespace object","webpack://my-extension/./src/popup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\n\nimport './popup.css';\n\n// document.getElementById('toggleButton').addEventListener('click', function() {\n//     // Get the current UI state from storage\n//     chrome.storage.local.get(['isPopupUI', 'detachedWindowId'], function(result) {\n//         const isPopupUI = result.isPopupUI !== false;  // Default to true if not set\n//         const detachedWindowId = result.detachedWindowId;\n\n//         if (isPopupUI) {\n//             // Detach the popup UI by opening a new window\n//             const popupUrl = chrome.runtime.getURL('popup.html');\n//             chrome.windows.create({\n//                 url: popupUrl,\n//                 type: 'popup',\n//                 width: 400,\n//                 height: 600\n//             }, function(window) {\n//                 // Store the new window ID and update UI state\n//                 chrome.storage.local.set({\n//                     detachedWindowId: window.id,\n//                     isPopupUI: false\n//                 });\n//             });\n//             // Close the original popup window\n//             window.close();\n//         } else {\n//             // Switch back to popup UI\n//             if (detachedWindowId) {\n//                 // Close the detached window\n//                 chrome.windows.remove(detachedWindowId, function() {\n//                     // Update UI state\n//                     chrome.storage.local.set({ isPopupUI: true });\n//                 });\n//             }\n//         }\n//     });\n// });\n\n\nwindow.onload = function () {\n    // chrome.storage.local.get('isPopupUI', function(result) {\n    //     const isPopupUI = result.isPopupUI !== false;  // Default to true if not set\n    //     if(isPopupUI){\n    //         const buttonText = isPopupUI ? 'Toggle UI' : 'Close';\n    //         document.getElementById('toggleButton').textContent = buttonText;\n    //     }\n    //     else{\n    //         document.getElementById(\"toggleButton\").style.display = \"none\";\n    //     }\n    // });\n    chrome.storage.local.get('currentVideoId', (result) => {\n        const curentVID = result.currentVideoId;\n        chrome.storage.local.get(curentVID, (result) => {\n\t\t\n            let messages = result[curentVID].messages || [];\n    \n            renderMessages(messages);\n        });\n        \n    });\n};\n\n// actions after user send the question\ndocument.getElementById('sendButton').addEventListener('click', function () {\n    var conversationDiv = document.getElementById('conversation');\n    var messageBody = document.querySelector('#conversation');\n\n    // show the loading indicator\n    document.getElementById('loadingIndicator').style.display = 'inline-block';\n\n    // get the value of user's input and empty the input field\n    var userInput = document.getElementById('userInput').value;\n    document.getElementById('userInput').value = '';\n\n    if (userInput != \"\") {\n\n        //append the \n        conversationDiv.innerHTML +=\n            `<div class=\"card user-message mb-2\">\n            <div class=\"card-body\">\n                <strong>You:</strong> ${userInput}\n            </div>\n            </div>`;\n        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            let activeTab = tabs[0];\n            chrome.tabs.sendMessage(activeTab.id, {\n                \"action\": \"askGPT\",\n                \"question\": userInput\n            }, function (response) {\n                console.log(response);\n                document.getElementById('loadingIndicator').style.display = 'none';\n                conversationDiv.innerHTML +=\n                    `<div class=\"card gpt-message mb-2\">\n                        <div class=\"card-body\">\n                            <strong>GPT:</strong> ${response}\n                        </div>\n                    </div>`;\n                \n                messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\n            });\n        });\n    }\n    else {\n        // document.getElementById('response').innerText = \"Please input a valid question\";\n    }\n});\n\nfunction saveMessage(sender, text) {\n    // Create a message object\n    const message = { sender, text };\n\n    // Get the current list of messages from storage\n    chrome.storage.local.get('messages', (result) => {\n        let messages = result.messages || [];\n\n        // Add the new message to the messages array\n        messages.push(message);\n\n        // Store the updated messages array back to storage\n        chrome.storage.local.set({ messages }, () => {\n            console.log('Message stored successfully');\n        });\n    });\n}\n\nfunction renderMessages(messages) {\n    const conversationDiv = document.getElementById('conversation');\n    let conversationHtml = '';\n\n    messages.forEach(message => {\n        const alignmentClass = message.sender === 'user' ? 'text-right' : 'text-left';\n        const senderLabel = message.sender === 'user' ? 'You' : 'GPT';\n\n        const messageHtml = `\n          <div class=\"card mb-2\">\n              <div class=\"card-body ${alignmentClass}\">\n                  <strong>${senderLabel}:</strong> ${message.text}\n              </div>\n          </div>`;\n\n        conversationHtml += messageHtml;\n    });\n\n    conversationDiv.innerHTML = conversationHtml;\n}"],"names":[],"sourceRoot":""}