{"version":3,"file":"contentScript.js","mappings":";;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,IAAI,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D;AACA,OAAO;AACP,KAAK;AACL,C","sources":["webpack://my-extension/./src/contentScript.js"],"sourcesContent":["'use strict';\n\n//Get video transcript on first entering watching page\nif (window.location.pathname.startsWith('/watch')) {\n    let urlParams = new URLSearchParams(window.location.search);\n    const videoId = urlParams.get('v');\n    chrome.storage.local.set({\n        currentVideoId: videoId\n    })\n    chrome.storage.local.get(videoId, function(result) {\n        if (result[videoId] !== undefined) {\n            console.log('video data existed');\n        } else {\n            parseCaption();\n        }\n    });\n}\n\n// Detect video change, when there is a video change, try parse the new transcript\n// NOT WORKING, parse must happen after refreshign the page\nconst targetNode = document.body;\nconst config = { childList: true, subtree: true }; \nconst callback = function(mutationsList, observer) {\n    for(let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            // Check if the video has changed, e.g. by checking the video URL or title\n            if (document.location.href !== previousHref) {\n                console.log('tttttttest')\n                previousHref = document.location.href;\n                window.location.reload();\n            }\n        }\n    }\n};\nlet previousHref = document.location.href;\nconst observer = new MutationObserver(callback);\nobserver.observe(targetNode, config);\n\n//Listener on incoming question.\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse){\n    //Get the current on-screen timestamp to narrow down \n    const currentTime = document.getElementsByClassName('video-stream')[0].currentTime;\n    let urlParams = new URLSearchParams(window.location.search);\n    const videoId = urlParams.get('v');\n    chrome.runtime.sendMessage({\n        \"action\": \"askGPT\",\n        'vid': videoId,\n        \"timestamp\": currentTime,\n        \"question\": request.question\n    }, function(response) {\n        sendResponse(response);\n    });\n    return true;\n});\n\n// Get the transcript of the current youtube video and storage the caption dict in storage\nfunction parseCaption(){\n    //Get the current video ID\n    if (window.location.pathname.startsWith('/watch')) {\n        let urlParams = new URLSearchParams(window.location.search);\n        const videoId = urlParams.get('v');\n\n        let scripts = Array.from(document.querySelectorAll('script'));\n        // Find the script containing ytInitialPlayerResponse\n        let targetScript = scripts.find(script => script.textContent.includes('ytInitialPlayerResponse'));\n        console.log(targetScript);\n        if (targetScript) {\n            \n            let match = targetScript.textContent.match(/ytInitialPlayerResponse\\s*=\\s*({.*?});/);\n            console.log(match)\n            if (match && match[1]) {\n                let ytData = JSON.parse(match[1]);\n                var subsUrl = ytData.captions.playerCaptionsTracklistRenderer.captionTracks[0].baseUrl;\n                console.log(subsUrl);\n            }\n        }\n\n        chrome.runtime.sendMessage({\n            \"action\": \"fetchTranscript\",\n            \"url\": subsUrl\n        }, function(response) {\n            console.log(response)\n            let xml = new DOMParser().parseFromString(response,\"text/xml\");\n            let data = parseXML(xml);\n            addToStorage(videoId, data)\n            return true\n        });\n\n        return false;\n    }\n}\n\nfunction parseXML(xml){\n    let items = xml.getElementsByTagName(\"text\");\n    let textJSON = {};\n    for(let i = 0; i < items.length; i++) {\n        let start = items[i].getAttribute(\"start\");\n        let duration = items[i].getAttribute(\"dur\");\n        let text = items[i].textContent;\n        let tempJson = {\n            duration: duration,\n            text: text\n        };\n        textJSON[start] = tempJson;\n    }\n    let json = {\n        messages: [],\n        transcript: textJSON\n    }\n    return json;\n}\n\nfunction addToStorage(key, val){\n    let obj = {};\n    obj[key] = val;\n\n    chrome.storage.local.set( obj, function() {\n      if(chrome.runtime.lastError) {\n        console.error(\n          \"Error setting \" + key + \" to \" + JSON.stringify(val) +\n          \": \" + chrome.runtime.lastError.message\n        );\n      }\n      chrome.runtime.sendMessage({status: \"Storage Updated\"}, function (responce) {\n          console.log(responce);\n      })\n    });\n}"],"names":[],"sourceRoot":""}